/*
 * Copyright (c) 2021, RTE (http://www.rte-france.com)
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */
package com.farao_community.farao.data.rao_result_json;

import com.farao_community.farao.commons.FaraoException;
import com.farao_community.farao.commons.Unit;
import com.farao_community.farao.data.crac_api.Instant;
import com.farao_community.farao.data.crac_api.InstantKind;
import com.farao_community.farao.data.crac_api.State;
import com.farao_community.farao.data.crac_api.cnec.Side;
import com.farao_community.farao.data.rao_result_api.ComputationStatus;
import com.farao_community.farao.data.rao_result_api.OptimizationStepsExecuted;
import org.apache.commons.lang3.StringUtils;

import java.util.Arrays;
import java.util.Comparator;
import java.util.Objects;

/**
 * @author Baptiste Seguinot {@literal <baptiste.seguinot at rte-france.com>}
 */
public final class RaoResultJsonConstants {

    public static final String RAO_RESULT_IO_VERSION = "1.4";
    // header
    public static final String TYPE = "type";
    public static final String VERSION = "version";
    public static final String INFO = "info";
    public static final String RAO_RESULT_TYPE = "RAO_RESULT";
    public static final String RAO_RESULT_INFO = "Generated by FARAO http://farao-community.github.io";
    public static final String CONTINGENCY_ID = "contingency";
    // costs
    public static final String COST_RESULTS = "costResults";
    public static final String FUNCTIONAL_COST = "functionalCost";
    public static final String VIRTUAL_COSTS = "virtualCost";
    // flowCnecResults and angleCnecResults
    public static final String FLOWCNEC_RESULTS = "flowCnecResults";
    public static final String FLOWCNEC_ID = "flowCnecId";
    public static final String FLOW = "flow";
    public static final String ANGLECNEC_RESULTS = "angleCnecResults";
    public static final String ANGLECNEC_ID = "angleCnecId";
    public static final String ANGLE = "angle";
    public static final String VOLTAGECNEC_RESULTS = "voltageCnecResults";
    public static final String VOLTAGECNEC_ID = "voltageCnecId";
    public static final String VOLTAGE = "voltage";
    public static final String MARGIN = "margin";
    public static final String RELATIVE_MARGIN = "relativeMargin";
    public static final String COMMERCIAL_FLOW = "commercialFlow";
    public static final String LOOP_FLOW = "loopFlow";
    public static final String ZONAL_PTDF_SUM = "zonalPtdfSum";
    // remedial action results
    public static final String STATES_ACTIVATED = "activatedStates";
    // networkActionResults
    public static final String NETWORKACTION_RESULTS = "networkActionResults";
    public static final String NETWORKACTION_ID = "networkActionId";
    // rangeActionResults
    public static final String PSTRANGEACTION_RESULTS = "pstRangeActionResults";
    public static final String PSTRANGEACTION_ID = "pstRangeActionId";
    public static final String STANDARDRANGEACTION_RESULTS = "standardRangeActionResults";
    public static final String RANGEACTION_RESULTS = "rangeActionResults";
    public static final String RANGEACTION_ID = "rangeActionId";
    public static final String INITIAL_TAP = "initialTap";
    public static final String INITIAL_SETPOINT = "initialSetpoint";
    public static final String AFTER_PRA_TAP = "afterPraTap";
    public static final String AFTER_PRA_SETPOINT = "afterPraSetpoint";
    public static final String TAP = "tap";
    public static final String SETPOINT = "setpoint";
    // instants
    public static final String INSTANT = "instant";
    public static final String INITIAL_INSTANT = "initial";
    public static final String PREVENTIVE_INSTANT = "preventive";
    public static final String OUTAGE_INSTANT = "outage";
    public static final String AUTO_INSTANT = "auto";
    public static final String CURATIVE_INSTANT = "curative";
    // units
    public static final String AMPERE_UNIT = "ampere";
    public static final String MEGAWATT_UNIT = "megawatt";
    public static final String DEGREE_UNIT = "degree";
    public static final String KILOVOLT_UNIT = "kilovolt";
    public static final String PERCENT_IMAX_UNIT = "percent_imax";
    public static final String TAP_UNIT = "tap";
    // branch side
    public static final String LEFT_SIDE = "leftSide";
    public static final String RIGHT_SIDE = "rightSide";
    // optimization states - for retro-compatibility only
    public static final String INITIAL_OPT_STATE = "initial";
    public static final String AFTER_PRA_OPT_STATE = "afterPRA";
    public static final String AFTER_ARA_OPT_STATE = "afterARA";
    public static final String AFTER_CRA_OPT_STATE = "afterCRA";
    // computation statuses
    public static final String COMPUTATION_STATUS = "computationStatus";
    public static final String DEFAULT_STATUS = "default";
    public static final String FAILURE_STATUS = "failure";
    public static final String COMPUTATION_STATUS_MAP = "computationStatusMap";
    // optimized steps executed by the RAO
    public static final String OPTIMIZATION_STEPS_EXECUTED = "optimizationStepsExecuted";
    public static final String FIRST_PREVENTIVE_ONLY = "The RAO only went through first preventive";
    public static final String FIRST_PREVENTIVE_FELLBACK = "First preventive fellback to initial situation";
    public static final String SECOND_PREVENTIVE_IMPROVED_FIRST = "Second preventive improved first preventive results";
    public static final String SECOND_PREVENTIVE_FELLBACK_TO_FIRST_PREVENTIVE_SITUATION = "Second preventive fellback to first preventive results";
    public static final String SECOND_PREVENTIVE_FELLBACK_TO_INITIAL_SITUATION = "Second preventive fellback to initial situation";
    // state comparator
    public static final Comparator<State> STATE_COMPARATOR = (s1, s2) -> { // TODO redo this
        if (s1.getInstant().getOrder() != s2.getInstant().getOrder()) {
            return s1.compareTo(s2);
        } else if (s1.getInstant().getInstantKind().equals(InstantKind.PREVENTIVE)) {
            return 0;
        } else {
            // Since instant is not preventive, there is a contingency for sure
            return s1.getContingency().orElseThrow().getId().compareTo(s2.getContingency().orElseThrow().getId());
        }
    };

    private RaoResultJsonConstants() {
    }

    // manipulate version
    public static int getPrimaryVersionNumber(String fullVersion) {
        return Integer.parseInt(divideVersionNumber(fullVersion)[0]);
    }

    public static int getSubVersionNumber(String fullVersion) {
        return Integer.parseInt(divideVersionNumber(fullVersion)[1]);
    }

    private static String[] divideVersionNumber(String fullVersion) {
        String[] dividedV = fullVersion.split("\\.");
        if (dividedV.length != 2 || !Arrays.stream(dividedV).allMatch(StringUtils::isNumeric)) {
            throw new FaraoException("json CRAC version number must be of the form vX.Y");
        }
        return dividedV;
    }

    // serialization of enums
    public static String serializeUnit(Unit unit) {
        return switch (unit) {
            case AMPERE -> AMPERE_UNIT;
            case DEGREE -> DEGREE_UNIT;
            case MEGAWATT -> MEGAWATT_UNIT;
            case KILOVOLT -> KILOVOLT_UNIT;
            case PERCENT_IMAX -> PERCENT_IMAX_UNIT;
            case TAP -> TAP_UNIT;
            default -> throw new FaraoException(String.format("Unsupported unit %s", unit));
        };
    }

    public static Unit deserializeUnit(String stringValue) {
        return switch (stringValue) {
            case AMPERE_UNIT -> Unit.AMPERE;
            case DEGREE_UNIT -> Unit.DEGREE;
            case MEGAWATT_UNIT -> Unit.MEGAWATT;
            case KILOVOLT_UNIT -> Unit.KILOVOLT;
            case PERCENT_IMAX_UNIT -> Unit.PERCENT_IMAX;
            case TAP_UNIT -> Unit.TAP;
            default -> throw new FaraoException(String.format("Unrecognized unit %s", stringValue));
        };
    }

    // serialization of enums
    public static String serializeSide(Side side) {
        return switch (side) {
            case LEFT -> LEFT_SIDE;
            case RIGHT -> RIGHT_SIDE;
        };
    }

    public static Side deserializeSide(String stringValue) {
        return switch (stringValue) {
            case LEFT_SIDE -> Side.LEFT;
            case RIGHT_SIDE -> Side.RIGHT;
            default -> throw new FaraoException(String.format("Unrecognized side %s", stringValue));
        };
    }

    public static String serializeInstantId(Instant instant) {
        if (instant == null) {
            return INITIAL_INSTANT;
        }
        // TODO review this
        return instant.getId();
    }

    public static String deserializeInstantId(String stringValue) {
        // TODO review this
        if (Objects.equals(stringValue, INITIAL_INSTANT)) {
            return null;
        }
        return stringValue;
    }

    public static String deserializeOptimizedInstantId(String stringValue, String jsonFileVersion) {
        // TODO review this
        if (getPrimaryVersionNumber(jsonFileVersion) <= 1 && getSubVersionNumber(jsonFileVersion) <= 3) {
            return switch (stringValue) {
                case INITIAL_OPT_STATE -> null;
                case AFTER_PRA_OPT_STATE -> InstantKind.PREVENTIVE.toString();
                case AFTER_ARA_OPT_STATE -> InstantKind.AUTO.toString();
                case AFTER_CRA_OPT_STATE -> InstantKind.CURATIVE.toString();
                default ->
                    throw new FaraoException(String.format("Unrecognized optimization state %s", stringValue)); // TODO valid exception message ?
            };
        } else {
            return deserializeInstantId(stringValue);
        }
    }

    public static String serializeStatus(ComputationStatus computationStatus) {
        return switch (computationStatus) {
            case DEFAULT -> DEFAULT_STATUS;
            case FAILURE -> FAILURE_STATUS;
        };
    }

    public static ComputationStatus deserializeStatus(String stringValue) {
        return switch (stringValue) {
            case DEFAULT_STATUS -> ComputationStatus.DEFAULT;
            case FAILURE_STATUS -> ComputationStatus.FAILURE;
            default -> throw new FaraoException(String.format("Unrecognized computation status %s", stringValue));
        };
    }

    public static String serializeOptimizedStepsExecuted(OptimizationStepsExecuted optimizationStepsExecuted) {
        return switch (optimizationStepsExecuted) {
            case FIRST_PREVENTIVE_ONLY -> FIRST_PREVENTIVE_ONLY;
            case FIRST_PREVENTIVE_FELLBACK_TO_INITIAL_SITUATION -> FIRST_PREVENTIVE_FELLBACK;
            case SECOND_PREVENTIVE_IMPROVED_FIRST -> SECOND_PREVENTIVE_IMPROVED_FIRST;
            case SECOND_PREVENTIVE_FELLBACK_TO_FIRST_PREVENTIVE_SITUATION ->
                SECOND_PREVENTIVE_FELLBACK_TO_FIRST_PREVENTIVE_SITUATION;
            case SECOND_PREVENTIVE_FELLBACK_TO_INITIAL_SITUATION -> SECOND_PREVENTIVE_FELLBACK_TO_INITIAL_SITUATION;
        };
    }

    public static OptimizationStepsExecuted deserializeOptimizedStepsExecuted(String stringValue) {
        return switch (stringValue) {
            case FIRST_PREVENTIVE_ONLY -> OptimizationStepsExecuted.FIRST_PREVENTIVE_ONLY;
            case FIRST_PREVENTIVE_FELLBACK -> OptimizationStepsExecuted.FIRST_PREVENTIVE_FELLBACK_TO_INITIAL_SITUATION;
            case SECOND_PREVENTIVE_IMPROVED_FIRST -> OptimizationStepsExecuted.SECOND_PREVENTIVE_IMPROVED_FIRST;
            case SECOND_PREVENTIVE_FELLBACK_TO_FIRST_PREVENTIVE_SITUATION ->
                OptimizationStepsExecuted.SECOND_PREVENTIVE_FELLBACK_TO_FIRST_PREVENTIVE_SITUATION;
            case SECOND_PREVENTIVE_FELLBACK_TO_INITIAL_SITUATION ->
                OptimizationStepsExecuted.SECOND_PREVENTIVE_FELLBACK_TO_INITIAL_SITUATION;
            default ->
                throw new FaraoException(String.format("Unrecognized optimization steps executed %s", stringValue));
        };
    }

}
